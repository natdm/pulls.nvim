================================================================================
Pulls.nvim                                                         *pulls.nvim*


TL;DR: View, comment, browse a pull request on the currently checked out branch.

To find out more:
https://github.com/natdm/pulls.nvim

:h pulls.setup
:h pulls.description
:h pulls.tag_window
:h pulls.untag_window
:h pulls.get_comments
:h pulls.get_comment_chains
:h pulls.reply_to_comment
:h pulls.submit_reply
:h pulls.diff_add_comment
:h pulls.diff_submit_comment
:h pulls.diff_show_comment
:h pulls.diff_next_comment
:h pulls.diff_go_to_file
:h pulls.diff
:h pulls.diff_next
:h pulls.list_changes
:h pulls.highlight_changes


pulls.setup({opts})                                              *pulls.setup()*
    Setup function to be run by user. Calling with nil sets the default mappings.
    The mappings are grouped by the diff the contents would have. Each diff 
    contains it's own mappings, so duplicating a key combination is not harmful.

    Usage:
    >
    require('pulls.nvim').setup{
	    mappings = {
		-- Each key is grouped in a buffer. It's fine to use the same
		-- mapping in different keys. eg: `diff` and `comments` can
		-- share a common mapping.

		diff = { -- Mappings for the diff view.
		    -- Show a comment under the current cursor (cc would do the same).
		    show_comment = "cg",
		    -- Add a new comment under the cursor. This will open the thread
		    -- of any existing comments.
		    add_comment = "cc",
		    -- Skip to the next comment in the diff (goes to EOF if none).
		    next_comment = "cn",
		    -- Goes to the file of the diff the cursor is under.
		    goto_file = "cf"
		},

		comments = { -- Mappings for when viewing a thread
		    -- Draft a reply to a comment. Opens a new diff.
		    reply = "cc"
		},

		action = { -- Mappings for when inserting text (comments, editing, etc).
		    -- Execute the action (submit a comment, save an update, etc).
		    submit = "<C-y>"
		}
	    }
	}	
    <

pulls.description()                                              *pulls.description()*
    View the description of the pull request. If there is a tagged window, it will be
    opened there.

pulls.tag_window()                                                *pulls.tag_window()*
    Tag a window as the main view-port for future actions. If the screen is split for
    windows A and B, if the diff is up in A, but window B is tagged, any actions
    in A (viewing a comment, going to a file, etc) will appear in B instead, and
    the diff in A remains where it is.

pulls.untag_window()                                            *pulls.untag_window()*
    Untag the previously tagged window.

pulls.get_comments()                                            *pulls.get_comments()*
    Show the comments for a PR in the quickfix list.

pulls.get_comment_chains()                                *pulls.get_comment_chains()*
pulls.reply_to_comment()                                    *pulls.reply_to_comment()*

    Default mapping: *cc*

    Required to be within a comment chain to call.

    Open up a draft reply to a conversation. The opened up window is formatted for
    markdown.

    Note about submit_comment(), submit_reply(), diff_add_comment(),
    and reply_to_comment(): These are automatically mapped with the default mappings
    to be the same for each situation, so while they're totally different API calls,
    the motions are the same.

pulls.submit_reply()                                            *pulls.submit_reply()*

    Default mapping: *<C-y>*

    Required to be within a draft comment window to call.

    Submit the reply within the comment window opened with `get_comment_chains()` to
    github.

    Note about submit_comment(), submit_reply(), diff_add_comment(),
    and reply_to_comment(): These are automatically mapped with the default mappings
    to be the same for each situation, so while they're totally different API calls,
    the motions are the same.

pulls.diff_add_comment()                                    *pulls.diff_add_comment()*

    Default mapping: *cc*

    Required to be within the diff window to call.

    Add a new comment to a diff. The comment will be applied to the line under the
    cursor.

    Note about submit_comment(), submit_reply(), diff_add_comment(),
    and reply_to_comment(): These are automatically mapped with the default mappings
    to be the same for each situation, so while they're totally different API calls,
    the motions are the same.

pulls.diff_submit_comment()                              *pulls.diff_submit_comment()*

    Default mapping: *<C-y>*

    Required to be within a draft comment window to call.

    Submit the new comment to Github for the current line. 

    Note about submit_comment(), submit_reply(), diff_add_comment(),
    and reply_to_comment(): These are automatically mapped with the default mappings
    to be the same for each situation, so while they're totally different API calls,
    the motions are the same.

pulls.diff_show_comment()                                  *pulls.diff_show_comment()*

    Default mapping: *cg*

    Required to be within the diff to call, with the cursor on the comment line

pulls.diff_next_comment()                                  *pulls.diff_next_comment()*

    Default mapping: *cn*

    Required to be within the diff to call. Navigates the mouse to the next comment,
    or EOF if no more comments.

pulls.diff_go_to_file()                                      *pulls.diff_go_to_file()*

    Default mapping: *cf*

    Required to be within a draft comment window to call.

    Navigate to the file for the current section of the dif.

    NOTE: Tries to navigate you to the line as well, but it won't be completely
    accurate.

pulls.diff()                                                            *pulls.diff()*

    Show the diff for all files in the MR. From this diff, the functions for going
    to a file, comments, replying, etc, are accessible.

pulls.diff_next()                                                  *pulls.diff_next()*

    In a file, go to the next piece of code that has changes for this PR.

pulls.list_changes()                                            *pulls.list_changes()*

    List all the changes within all the files for the current PR in a quickfix window.

pulls.highlight_changes()                                  *pulls.highlight_changes()*

    In a file, highlight all the numbers that correlate to diff changes. 

    Red: deletes
    Yellow: changes
    Green: adds
