================================================================================
Pulls.nvim                                                         *pulls.nvim*

View, comment, browse a pull request on the currently checked out branch.

Requires a github token set to the enironmental variable `GITHUB_API`.

To find out more:
https://github.com/natdm/pulls.nvim

:h pulls.setup
:h pulls.refresh
:h pulls.description
:h pulls.tag_window
:h pulls.untag_window
:h pulls.comments
:h pulls.diff
:h pulls.list_changes
:h pulls.highlight_changes

It's advised to not directly map to any function that already has a mapping, as these
are for `pulls.nvim` buffer usage only. If you wish to change those mappings. please
configure that in the `setup({...})` call.

pulls.setup({opts})                                              *pulls.setup()*
    Setup function to be run by user. Calling with nil sets the default mappings.
    The mappings are grouped by the diff the contents would have. Each diff 
    contains it's own mappings, so duplicating a key combination is not harmful.

    Usage: >
    require('pulls').setup{
	    mappings = {
		-- Each key is grouped in a buffer. It's fine to use the same
		-- mapping in different keys. eg: `diff` and `comments` can
		-- share a common mapping.

		diff = { -- Mappings for the diff view.
		    -- Show a comment under the current cursor (cc would do the same).
		    show_comment = "cg",
		    -- Add a new comment under the cursor. This will open the thread
		    -- of any existing comments.
		    add_comment = "cc",
		    -- Skip to the next comment in the diff (goes to EOF if none).
		    next_comment = "cn",
		    -- Goes to the file of the diff the cursor is under.
		    goto_file = "cf",
		    -- If a window is tagged, the preview will show in that window, and
		    -- the cursor will remain in the diff. No effect at all if no window
		    -- is tagged.
		    preview_file = "cp"
		},

		description = { -- Mappings for when the cursor is in the PR description.
		    -- Edit the PR description.
		    edit = "ce"
		},

		comments = { -- Mappings for when viewing a thread
		    -- Draft a reply to a comment. Opens a new diff.
		    reply = "cc"
		},

		action = { -- Mappings for when inserting text (comments, editing, etc).
		    -- Execute the action (submit a comment, save an update, etc).
		    submit = "<C-y>"
		}
	    }
	}	
<
    

    Mapping example: >
    local map = vim.api.nvim_set_keymap
    local opts = {noremap = true, silent = true}

    map('n', '<leader>dd', '<cmd>lua require("pulls").diff()<CR>', opts)
    map('n', '<leader>pt', '<cmd>lua require("pulls").tag_window()<CR>', opts)
    map('n', '<leader>pu', '<cmd>lua require("pulls").untag_window()<CR>', opts)
    map('n', '<leader>pd', '<cmd>lua require("pulls").description()<CR>', opts)
    map('n', '<leader>pn', '<cmd>lua require("pulls").diff_next()<CR>', opts)
    map('n', '<leader>pc', '<cmd>lua require("pulls").list_changes()<CR>', opts)
    map('n', '<leader>ph', '<cmd>lua require("pulls").highlight_changes()<CR>', opts)
<


pulls.refresh()                                                      *pulls.refresh()*

    Refresh the plugin state, calling github for new information.

pulls.description()                                              *pulls.description()*

    View the description of the pull request. If there is a tagged window, it will be
    opened there.

pulls.tag_window()                                                *pulls.tag_window()*

    Tag a window as the main view-port for future actions. If the screen is split for
    windows A and B, if the diff is up in A, but window B is tagged, any actions
    in A (viewing a comment, going to a file, etc) will appear in B instead, and
    the diff in A remains where it is.

pulls.untag_window()                                            *pulls.untag_window()*

    Untag the previously tagged window.

pulls.comments()                                                    *pulls.comments()*

    Show the comments for a PR in the quickfix list.

pulls.diff()                                                            *pulls.diff()*

    Show the diff for all files in the MR. From this diff, the functions for going
    to a file, comments, replying, etc, are accessible.

pulls.list_changes()                                            *pulls.list_changes()*

    List all the changes within all the files for the current PR in a quickfix window.

pulls.highlight_changes()                                  *pulls.highlight_changes()*

    In a file, highlight all the numbers that correlate to diff changes. 

    Red: deletes
    Yellow: changes
    Green: adds

Author:  Nathan Hyland <https://github.com/natdm>                               *pulls-author*

